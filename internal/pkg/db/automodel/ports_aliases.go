// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package automodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PortsAlias is an object representing the database table.
type PortsAlias struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PortID    int       `boil:"port_id" json:"port_id" toml:"port_id" yaml:"port_id"`
	Alias     string    `boil:"alias" json:"alias" toml:"alias" yaml:"alias"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *portsAliasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portsAliasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortsAliasColumns = struct {
	ID        string
	PortID    string
	Alias     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	PortID:    "port_id",
	Alias:     "alias",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var PortsAliasTableColumns = struct {
	ID        string
	PortID    string
	Alias     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "ports_aliases.id",
	PortID:    "ports_aliases.port_id",
	Alias:     "ports_aliases.alias",
	CreatedAt: "ports_aliases.created_at",
	UpdatedAt: "ports_aliases.updated_at",
	DeletedAt: "ports_aliases.deleted_at",
}

// Generated where

var PortsAliasWhere = struct {
	ID        whereHelperint
	PortID    whereHelperint
	Alias     whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`ports_aliases`.`id`"},
	PortID:    whereHelperint{field: "`ports_aliases`.`port_id`"},
	Alias:     whereHelperstring{field: "`ports_aliases`.`alias`"},
	CreatedAt: whereHelpertime_Time{field: "`ports_aliases`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`ports_aliases`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`ports_aliases`.`deleted_at`"},
}

// PortsAliasRels is where relationship names are stored.
var PortsAliasRels = struct {
	Port string
}{
	Port: "Port",
}

// portsAliasR is where relationships are stored.
type portsAliasR struct {
	Port *Port `boil:"Port" json:"Port" toml:"Port" yaml:"Port"`
}

// NewStruct creates a new relationship struct
func (*portsAliasR) NewStruct() *portsAliasR {
	return &portsAliasR{}
}

// portsAliasL is where Load methods for each relationship are stored.
type portsAliasL struct{}

var (
	portsAliasAllColumns            = []string{"id", "port_id", "alias", "created_at", "updated_at", "deleted_at"}
	portsAliasColumnsWithoutDefault = []string{"port_id", "alias", "updated_at", "deleted_at"}
	portsAliasColumnsWithDefault    = []string{"id", "created_at"}
	portsAliasPrimaryKeyColumns     = []string{"id"}
)

type (
	// PortsAliasSlice is an alias for a slice of pointers to PortsAlias.
	// This should almost always be used instead of []PortsAlias.
	PortsAliasSlice []*PortsAlias
	// PortsAliasHook is the signature for custom PortsAlias hook methods
	PortsAliasHook func(context.Context, boil.ContextExecutor, *PortsAlias) error

	portsAliasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portsAliasType                 = reflect.TypeOf(&PortsAlias{})
	portsAliasMapping              = queries.MakeStructMapping(portsAliasType)
	portsAliasPrimaryKeyMapping, _ = queries.BindMapping(portsAliasType, portsAliasMapping, portsAliasPrimaryKeyColumns)
	portsAliasInsertCacheMut       sync.RWMutex
	portsAliasInsertCache          = make(map[string]insertCache)
	portsAliasUpdateCacheMut       sync.RWMutex
	portsAliasUpdateCache          = make(map[string]updateCache)
	portsAliasUpsertCacheMut       sync.RWMutex
	portsAliasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portsAliasBeforeInsertHooks []PortsAliasHook
var portsAliasBeforeUpdateHooks []PortsAliasHook
var portsAliasBeforeDeleteHooks []PortsAliasHook
var portsAliasBeforeUpsertHooks []PortsAliasHook

var portsAliasAfterInsertHooks []PortsAliasHook
var portsAliasAfterSelectHooks []PortsAliasHook
var portsAliasAfterUpdateHooks []PortsAliasHook
var portsAliasAfterDeleteHooks []PortsAliasHook
var portsAliasAfterUpsertHooks []PortsAliasHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortsAlias) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortsAlias) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortsAlias) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortsAlias) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortsAlias) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortsAlias) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortsAlias) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortsAlias) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortsAlias) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsAliasAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortsAliasHook registers your hook function for all future operations.
func AddPortsAliasHook(hookPoint boil.HookPoint, portsAliasHook PortsAliasHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portsAliasBeforeInsertHooks = append(portsAliasBeforeInsertHooks, portsAliasHook)
	case boil.BeforeUpdateHook:
		portsAliasBeforeUpdateHooks = append(portsAliasBeforeUpdateHooks, portsAliasHook)
	case boil.BeforeDeleteHook:
		portsAliasBeforeDeleteHooks = append(portsAliasBeforeDeleteHooks, portsAliasHook)
	case boil.BeforeUpsertHook:
		portsAliasBeforeUpsertHooks = append(portsAliasBeforeUpsertHooks, portsAliasHook)
	case boil.AfterInsertHook:
		portsAliasAfterInsertHooks = append(portsAliasAfterInsertHooks, portsAliasHook)
	case boil.AfterSelectHook:
		portsAliasAfterSelectHooks = append(portsAliasAfterSelectHooks, portsAliasHook)
	case boil.AfterUpdateHook:
		portsAliasAfterUpdateHooks = append(portsAliasAfterUpdateHooks, portsAliasHook)
	case boil.AfterDeleteHook:
		portsAliasAfterDeleteHooks = append(portsAliasAfterDeleteHooks, portsAliasHook)
	case boil.AfterUpsertHook:
		portsAliasAfterUpsertHooks = append(portsAliasAfterUpsertHooks, portsAliasHook)
	}
}

// One returns a single portsAlias record from the query.
func (q portsAliasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortsAlias, error) {
	o := &PortsAlias{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: failed to execute a one query for ports_aliases")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortsAlias records from the query.
func (q portsAliasQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortsAliasSlice, error) {
	var o []*PortsAlias

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "automodel: failed to assign all query results to PortsAlias slice")
	}

	if len(portsAliasAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortsAlias records in the query.
func (q portsAliasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to count ports_aliases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portsAliasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "automodel: failed to check if ports_aliases exists")
	}

	return count > 0, nil
}

// Port pointed to by the foreign key.
func (o *PortsAlias) Port(mods ...qm.QueryMod) portQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PortID),
	}

	queryMods = append(queryMods, mods...)

	query := Ports(queryMods...)
	queries.SetFrom(query.Query, "`ports`")

	return query
}

// LoadPort allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portsAliasL) LoadPort(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortsAlias interface{}, mods queries.Applicator) error {
	var slice []*PortsAlias
	var object *PortsAlias

	if singular {
		object = maybePortsAlias.(*PortsAlias)
	} else {
		slice = *maybePortsAlias.(*[]*PortsAlias)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portsAliasR{}
		}
		args = append(args, object.PortID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portsAliasR{}
			}

			for _, a := range args {
				if a == obj.PortID {
					continue Outer
				}
			}

			args = append(args, obj.PortID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ports`),
		qm.WhereIn(`ports.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Port")
	}

	var resultSlice []*Port
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Port")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ports")
	}

	if len(portsAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Port = foreign
		if foreign.R == nil {
			foreign.R = &portR{}
		}
		foreign.R.PortsAliases = append(foreign.R.PortsAliases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PortID == foreign.ID {
				local.R.Port = foreign
				if foreign.R == nil {
					foreign.R = &portR{}
				}
				foreign.R.PortsAliases = append(foreign.R.PortsAliases, local)
				break
			}
		}
	}

	return nil
}

// SetPort of the portsAlias to the related item.
// Sets o.R.Port to related.
// Adds o to related.R.PortsAliases.
func (o *PortsAlias) SetPort(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Port) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ports_aliases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"port_id"}),
		strmangle.WhereClause("`", "`", 0, portsAliasPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PortID = related.ID
	if o.R == nil {
		o.R = &portsAliasR{
			Port: related,
		}
	} else {
		o.R.Port = related
	}

	if related.R == nil {
		related.R = &portR{
			PortsAliases: PortsAliasSlice{o},
		}
	} else {
		related.R.PortsAliases = append(related.R.PortsAliases, o)
	}

	return nil
}

// PortsAliases retrieves all the records using an executor.
func PortsAliases(mods ...qm.QueryMod) portsAliasQuery {
	mods = append(mods, qm.From("`ports_aliases`"))
	return portsAliasQuery{NewQuery(mods...)}
}

// FindPortsAlias retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortsAlias(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PortsAlias, error) {
	portsAliasObj := &PortsAlias{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ports_aliases` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portsAliasObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: unable to select from ports_aliases")
	}

	if err = portsAliasObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portsAliasObj, err
	}

	return portsAliasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortsAlias) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports_aliases provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portsAliasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portsAliasInsertCacheMut.RLock()
	cache, cached := portsAliasInsertCache[key]
	portsAliasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portsAliasAllColumns,
			portsAliasColumnsWithDefault,
			portsAliasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portsAliasType, portsAliasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portsAliasType, portsAliasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ports_aliases` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ports_aliases` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ports_aliases` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portsAliasPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to insert into ports_aliases")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portsAliasMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports_aliases")
	}

CacheNoHooks:
	if !cached {
		portsAliasInsertCacheMut.Lock()
		portsAliasInsertCache[key] = cache
		portsAliasInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortsAlias.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortsAlias) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portsAliasUpdateCacheMut.RLock()
	cache, cached := portsAliasUpdateCache[key]
	portsAliasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portsAliasAllColumns,
			portsAliasPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("automodel: unable to update ports_aliases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ports_aliases` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portsAliasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portsAliasType, portsAliasMapping, append(wl, portsAliasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update ports_aliases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by update for ports_aliases")
	}

	if !cached {
		portsAliasUpdateCacheMut.Lock()
		portsAliasUpdateCache[key] = cache
		portsAliasUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portsAliasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all for ports_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected for ports_aliases")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortsAliasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("automodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ports_aliases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsAliasPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all in portsAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected all in update all portsAlias")
	}
	return rowsAff, nil
}

var mySQLPortsAliasUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortsAlias) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports_aliases provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portsAliasColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortsAliasUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portsAliasUpsertCacheMut.RLock()
	cache, cached := portsAliasUpsertCache[key]
	portsAliasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portsAliasAllColumns,
			portsAliasColumnsWithDefault,
			portsAliasColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portsAliasAllColumns,
			portsAliasPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("automodel: unable to upsert ports_aliases, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ports_aliases`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ports_aliases` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portsAliasType, portsAliasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portsAliasType, portsAliasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to upsert for ports_aliases")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portsAliasMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portsAliasType, portsAliasMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to retrieve unique values for ports_aliases")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports_aliases")
	}

CacheNoHooks:
	if !cached {
		portsAliasUpsertCacheMut.Lock()
		portsAliasUpsertCache[key] = cache
		portsAliasUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortsAlias record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortsAlias) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("automodel: no PortsAlias provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portsAliasPrimaryKeyMapping)
	sql := "DELETE FROM `ports_aliases` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete from ports_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by delete for ports_aliases")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portsAliasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("automodel: no portsAliasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from ports_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports_aliases")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortsAliasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portsAliasBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ports_aliases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsAliasPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from portsAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports_aliases")
	}

	if len(portsAliasAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortsAlias) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortsAlias(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortsAliasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortsAliasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ports_aliases`.* FROM `ports_aliases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsAliasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to reload all in PortsAliasSlice")
	}

	*o = slice

	return nil
}

// PortsAliasExists checks if the PortsAlias row exists.
func PortsAliasExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ports_aliases` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "automodel: unable to check if ports_aliases exists")
	}

	return exists, nil
}
