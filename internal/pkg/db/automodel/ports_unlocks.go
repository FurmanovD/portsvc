// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package automodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PortsUnlock is an object representing the database table.
type PortsUnlock struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PortID    int       `boil:"port_id" json:"port_id" toml:"port_id" yaml:"port_id"`
	Unlockid  string    `boil:"unlockid" json:"unlockid" toml:"unlockid" yaml:"unlockid"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *portsUnlockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portsUnlockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortsUnlockColumns = struct {
	ID        string
	PortID    string
	Unlockid  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	PortID:    "port_id",
	Unlockid:  "unlockid",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var PortsUnlockTableColumns = struct {
	ID        string
	PortID    string
	Unlockid  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "ports_unlocks.id",
	PortID:    "ports_unlocks.port_id",
	Unlockid:  "ports_unlocks.unlockid",
	CreatedAt: "ports_unlocks.created_at",
	UpdatedAt: "ports_unlocks.updated_at",
	DeletedAt: "ports_unlocks.deleted_at",
}

// Generated where

var PortsUnlockWhere = struct {
	ID        whereHelperint
	PortID    whereHelperint
	Unlockid  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`ports_unlocks`.`id`"},
	PortID:    whereHelperint{field: "`ports_unlocks`.`port_id`"},
	Unlockid:  whereHelperstring{field: "`ports_unlocks`.`unlockid`"},
	CreatedAt: whereHelpertime_Time{field: "`ports_unlocks`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`ports_unlocks`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`ports_unlocks`.`deleted_at`"},
}

// PortsUnlockRels is where relationship names are stored.
var PortsUnlockRels = struct {
	UnlockidPort string
}{
	UnlockidPort: "UnlockidPort",
}

// portsUnlockR is where relationships are stored.
type portsUnlockR struct {
	UnlockidPort *Port `boil:"UnlockidPort" json:"UnlockidPort" toml:"UnlockidPort" yaml:"UnlockidPort"`
}

// NewStruct creates a new relationship struct
func (*portsUnlockR) NewStruct() *portsUnlockR {
	return &portsUnlockR{}
}

// portsUnlockL is where Load methods for each relationship are stored.
type portsUnlockL struct{}

var (
	portsUnlockAllColumns            = []string{"id", "port_id", "unlockid", "created_at", "updated_at", "deleted_at"}
	portsUnlockColumnsWithoutDefault = []string{"port_id", "unlockid", "updated_at", "deleted_at"}
	portsUnlockColumnsWithDefault    = []string{"id", "created_at"}
	portsUnlockPrimaryKeyColumns     = []string{"id"}
)

type (
	// PortsUnlockSlice is an alias for a slice of pointers to PortsUnlock.
	// This should almost always be used instead of []PortsUnlock.
	PortsUnlockSlice []*PortsUnlock
	// PortsUnlockHook is the signature for custom PortsUnlock hook methods
	PortsUnlockHook func(context.Context, boil.ContextExecutor, *PortsUnlock) error

	portsUnlockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portsUnlockType                 = reflect.TypeOf(&PortsUnlock{})
	portsUnlockMapping              = queries.MakeStructMapping(portsUnlockType)
	portsUnlockPrimaryKeyMapping, _ = queries.BindMapping(portsUnlockType, portsUnlockMapping, portsUnlockPrimaryKeyColumns)
	portsUnlockInsertCacheMut       sync.RWMutex
	portsUnlockInsertCache          = make(map[string]insertCache)
	portsUnlockUpdateCacheMut       sync.RWMutex
	portsUnlockUpdateCache          = make(map[string]updateCache)
	portsUnlockUpsertCacheMut       sync.RWMutex
	portsUnlockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portsUnlockBeforeInsertHooks []PortsUnlockHook
var portsUnlockBeforeUpdateHooks []PortsUnlockHook
var portsUnlockBeforeDeleteHooks []PortsUnlockHook
var portsUnlockBeforeUpsertHooks []PortsUnlockHook

var portsUnlockAfterInsertHooks []PortsUnlockHook
var portsUnlockAfterSelectHooks []PortsUnlockHook
var portsUnlockAfterUpdateHooks []PortsUnlockHook
var portsUnlockAfterDeleteHooks []PortsUnlockHook
var portsUnlockAfterUpsertHooks []PortsUnlockHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortsUnlock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortsUnlock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortsUnlock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortsUnlock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortsUnlock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortsUnlock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortsUnlock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortsUnlock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortsUnlock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portsUnlockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortsUnlockHook registers your hook function for all future operations.
func AddPortsUnlockHook(hookPoint boil.HookPoint, portsUnlockHook PortsUnlockHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portsUnlockBeforeInsertHooks = append(portsUnlockBeforeInsertHooks, portsUnlockHook)
	case boil.BeforeUpdateHook:
		portsUnlockBeforeUpdateHooks = append(portsUnlockBeforeUpdateHooks, portsUnlockHook)
	case boil.BeforeDeleteHook:
		portsUnlockBeforeDeleteHooks = append(portsUnlockBeforeDeleteHooks, portsUnlockHook)
	case boil.BeforeUpsertHook:
		portsUnlockBeforeUpsertHooks = append(portsUnlockBeforeUpsertHooks, portsUnlockHook)
	case boil.AfterInsertHook:
		portsUnlockAfterInsertHooks = append(portsUnlockAfterInsertHooks, portsUnlockHook)
	case boil.AfterSelectHook:
		portsUnlockAfterSelectHooks = append(portsUnlockAfterSelectHooks, portsUnlockHook)
	case boil.AfterUpdateHook:
		portsUnlockAfterUpdateHooks = append(portsUnlockAfterUpdateHooks, portsUnlockHook)
	case boil.AfterDeleteHook:
		portsUnlockAfterDeleteHooks = append(portsUnlockAfterDeleteHooks, portsUnlockHook)
	case boil.AfterUpsertHook:
		portsUnlockAfterUpsertHooks = append(portsUnlockAfterUpsertHooks, portsUnlockHook)
	}
}

// One returns a single portsUnlock record from the query.
func (q portsUnlockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortsUnlock, error) {
	o := &PortsUnlock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: failed to execute a one query for ports_unlocks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortsUnlock records from the query.
func (q portsUnlockQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortsUnlockSlice, error) {
	var o []*PortsUnlock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "automodel: failed to assign all query results to PortsUnlock slice")
	}

	if len(portsUnlockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortsUnlock records in the query.
func (q portsUnlockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to count ports_unlocks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portsUnlockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "automodel: failed to check if ports_unlocks exists")
	}

	return count > 0, nil
}

// UnlockidPort pointed to by the foreign key.
func (o *PortsUnlock) UnlockidPort(mods ...qm.QueryMod) portQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`portid` = ?", o.Unlockid),
	}

	queryMods = append(queryMods, mods...)

	query := Ports(queryMods...)
	queries.SetFrom(query.Query, "`ports`")

	return query
}

// LoadUnlockidPort allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portsUnlockL) LoadUnlockidPort(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortsUnlock interface{}, mods queries.Applicator) error {
	var slice []*PortsUnlock
	var object *PortsUnlock

	if singular {
		object = maybePortsUnlock.(*PortsUnlock)
	} else {
		slice = *maybePortsUnlock.(*[]*PortsUnlock)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portsUnlockR{}
		}
		args = append(args, object.Unlockid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portsUnlockR{}
			}

			for _, a := range args {
				if a == obj.Unlockid {
					continue Outer
				}
			}

			args = append(args, obj.Unlockid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ports`),
		qm.WhereIn(`ports.portid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Port")
	}

	var resultSlice []*Port
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Port")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ports")
	}

	if len(portsUnlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UnlockidPort = foreign
		if foreign.R == nil {
			foreign.R = &portR{}
		}
		foreign.R.UnlockidPortsUnlocks = append(foreign.R.UnlockidPortsUnlocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Unlockid == foreign.Portid {
				local.R.UnlockidPort = foreign
				if foreign.R == nil {
					foreign.R = &portR{}
				}
				foreign.R.UnlockidPortsUnlocks = append(foreign.R.UnlockidPortsUnlocks, local)
				break
			}
		}
	}

	return nil
}

// SetUnlockidPort of the portsUnlock to the related item.
// Sets o.R.UnlockidPort to related.
// Adds o to related.R.UnlockidPortsUnlocks.
func (o *PortsUnlock) SetUnlockidPort(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Port) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ports_unlocks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"unlockid"}),
		strmangle.WhereClause("`", "`", 0, portsUnlockPrimaryKeyColumns),
	)
	values := []interface{}{related.Portid, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Unlockid = related.Portid
	if o.R == nil {
		o.R = &portsUnlockR{
			UnlockidPort: related,
		}
	} else {
		o.R.UnlockidPort = related
	}

	if related.R == nil {
		related.R = &portR{
			UnlockidPortsUnlocks: PortsUnlockSlice{o},
		}
	} else {
		related.R.UnlockidPortsUnlocks = append(related.R.UnlockidPortsUnlocks, o)
	}

	return nil
}

// PortsUnlocks retrieves all the records using an executor.
func PortsUnlocks(mods ...qm.QueryMod) portsUnlockQuery {
	mods = append(mods, qm.From("`ports_unlocks`"))
	return portsUnlockQuery{NewQuery(mods...)}
}

// FindPortsUnlock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortsUnlock(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PortsUnlock, error) {
	portsUnlockObj := &PortsUnlock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ports_unlocks` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portsUnlockObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: unable to select from ports_unlocks")
	}

	if err = portsUnlockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portsUnlockObj, err
	}

	return portsUnlockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortsUnlock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports_unlocks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portsUnlockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portsUnlockInsertCacheMut.RLock()
	cache, cached := portsUnlockInsertCache[key]
	portsUnlockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portsUnlockAllColumns,
			portsUnlockColumnsWithDefault,
			portsUnlockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ports_unlocks` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ports_unlocks` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ports_unlocks` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portsUnlockPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to insert into ports_unlocks")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portsUnlockMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports_unlocks")
	}

CacheNoHooks:
	if !cached {
		portsUnlockInsertCacheMut.Lock()
		portsUnlockInsertCache[key] = cache
		portsUnlockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortsUnlock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortsUnlock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portsUnlockUpdateCacheMut.RLock()
	cache, cached := portsUnlockUpdateCache[key]
	portsUnlockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portsUnlockAllColumns,
			portsUnlockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("automodel: unable to update ports_unlocks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ports_unlocks` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portsUnlockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, append(wl, portsUnlockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update ports_unlocks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by update for ports_unlocks")
	}

	if !cached {
		portsUnlockUpdateCacheMut.Lock()
		portsUnlockUpdateCache[key] = cache
		portsUnlockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portsUnlockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all for ports_unlocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected for ports_unlocks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortsUnlockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("automodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsUnlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ports_unlocks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsUnlockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all in portsUnlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected all in update all portsUnlock")
	}
	return rowsAff, nil
}

var mySQLPortsUnlockUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortsUnlock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports_unlocks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portsUnlockColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortsUnlockUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portsUnlockUpsertCacheMut.RLock()
	cache, cached := portsUnlockUpsertCache[key]
	portsUnlockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portsUnlockAllColumns,
			portsUnlockColumnsWithDefault,
			portsUnlockColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portsUnlockAllColumns,
			portsUnlockPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("automodel: unable to upsert ports_unlocks, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ports_unlocks`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ports_unlocks` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to upsert for ports_unlocks")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portsUnlockMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portsUnlockType, portsUnlockMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to retrieve unique values for ports_unlocks")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports_unlocks")
	}

CacheNoHooks:
	if !cached {
		portsUnlockUpsertCacheMut.Lock()
		portsUnlockUpsertCache[key] = cache
		portsUnlockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortsUnlock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortsUnlock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("automodel: no PortsUnlock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portsUnlockPrimaryKeyMapping)
	sql := "DELETE FROM `ports_unlocks` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete from ports_unlocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by delete for ports_unlocks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portsUnlockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("automodel: no portsUnlockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from ports_unlocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports_unlocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortsUnlockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portsUnlockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsUnlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ports_unlocks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsUnlockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from portsUnlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports_unlocks")
	}

	if len(portsUnlockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortsUnlock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortsUnlock(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortsUnlockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortsUnlockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portsUnlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ports_unlocks`.* FROM `ports_unlocks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portsUnlockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to reload all in PortsUnlockSlice")
	}

	*o = slice

	return nil
}

// PortsUnlockExists checks if the PortsUnlock row exists.
func PortsUnlockExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ports_unlocks` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "automodel: unable to check if ports_unlocks exists")
	}

	return exists, nil
}
