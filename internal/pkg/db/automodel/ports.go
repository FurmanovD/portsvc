// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package automodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Port is an object representing the database table.
type Port struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Portid    string      `boil:"portid" json:"portid" toml:"portid" yaml:"portid"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	City      string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Country   string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	Province  null.String `boil:"province" json:"province,omitempty" toml:"province" yaml:"province,omitempty"`
	Timezone  string      `boil:"timezone" json:"timezone" toml:"timezone" yaml:"timezone"`
	Code      string      `boil:"code" json:"code" toml:"code" yaml:"code"`
	Latitude  string      `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude string      `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *portR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortColumns = struct {
	ID        string
	Portid    string
	Name      string
	City      string
	Country   string
	Province  string
	Timezone  string
	Code      string
	Latitude  string
	Longitude string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Portid:    "portid",
	Name:      "name",
	City:      "city",
	Country:   "country",
	Province:  "province",
	Timezone:  "timezone",
	Code:      "code",
	Latitude:  "latitude",
	Longitude: "longitude",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var PortTableColumns = struct {
	ID        string
	Portid    string
	Name      string
	City      string
	Country   string
	Province  string
	Timezone  string
	Code      string
	Latitude  string
	Longitude string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "ports.id",
	Portid:    "ports.portid",
	Name:      "ports.name",
	City:      "ports.city",
	Country:   "ports.country",
	Province:  "ports.province",
	Timezone:  "ports.timezone",
	Code:      "ports.code",
	Latitude:  "ports.latitude",
	Longitude: "ports.longitude",
	CreatedAt: "ports.created_at",
	UpdatedAt: "ports.updated_at",
	DeletedAt: "ports.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PortWhere = struct {
	ID        whereHelperint
	Portid    whereHelperstring
	Name      whereHelperstring
	City      whereHelperstring
	Country   whereHelperstring
	Province  whereHelpernull_String
	Timezone  whereHelperstring
	Code      whereHelperstring
	Latitude  whereHelperstring
	Longitude whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`ports`.`id`"},
	Portid:    whereHelperstring{field: "`ports`.`portid`"},
	Name:      whereHelperstring{field: "`ports`.`name`"},
	City:      whereHelperstring{field: "`ports`.`city`"},
	Country:   whereHelperstring{field: "`ports`.`country`"},
	Province:  whereHelpernull_String{field: "`ports`.`province`"},
	Timezone:  whereHelperstring{field: "`ports`.`timezone`"},
	Code:      whereHelperstring{field: "`ports`.`code`"},
	Latitude:  whereHelperstring{field: "`ports`.`latitude`"},
	Longitude: whereHelperstring{field: "`ports`.`longitude`"},
	CreatedAt: whereHelpertime_Time{field: "`ports`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`ports`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`ports`.`deleted_at`"},
}

// PortRels is where relationship names are stored.
var PortRels = struct {
	PortsAliases         string
	UnlockidPortsUnlocks string
}{
	PortsAliases:         "PortsAliases",
	UnlockidPortsUnlocks: "UnlockidPortsUnlocks",
}

// portR is where relationships are stored.
type portR struct {
	PortsAliases         PortsAliasSlice  `boil:"PortsAliases" json:"PortsAliases" toml:"PortsAliases" yaml:"PortsAliases"`
	UnlockidPortsUnlocks PortsUnlockSlice `boil:"UnlockidPortsUnlocks" json:"UnlockidPortsUnlocks" toml:"UnlockidPortsUnlocks" yaml:"UnlockidPortsUnlocks"`
}

// NewStruct creates a new relationship struct
func (*portR) NewStruct() *portR {
	return &portR{}
}

// portL is where Load methods for each relationship are stored.
type portL struct{}

var (
	portAllColumns            = []string{"id", "portid", "name", "city", "country", "province", "timezone", "code", "latitude", "longitude", "created_at", "updated_at", "deleted_at"}
	portColumnsWithoutDefault = []string{"portid", "name", "city", "country", "province", "timezone", "code", "latitude", "longitude", "updated_at", "deleted_at"}
	portColumnsWithDefault    = []string{"id", "created_at"}
	portPrimaryKeyColumns     = []string{"id"}
)

type (
	// PortSlice is an alias for a slice of pointers to Port.
	// This should almost always be used instead of []Port.
	PortSlice []*Port
	// PortHook is the signature for custom Port hook methods
	PortHook func(context.Context, boil.ContextExecutor, *Port) error

	portQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portType                 = reflect.TypeOf(&Port{})
	portMapping              = queries.MakeStructMapping(portType)
	portPrimaryKeyMapping, _ = queries.BindMapping(portType, portMapping, portPrimaryKeyColumns)
	portInsertCacheMut       sync.RWMutex
	portInsertCache          = make(map[string]insertCache)
	portUpdateCacheMut       sync.RWMutex
	portUpdateCache          = make(map[string]updateCache)
	portUpsertCacheMut       sync.RWMutex
	portUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portBeforeInsertHooks []PortHook
var portBeforeUpdateHooks []PortHook
var portBeforeDeleteHooks []PortHook
var portBeforeUpsertHooks []PortHook

var portAfterInsertHooks []PortHook
var portAfterSelectHooks []PortHook
var portAfterUpdateHooks []PortHook
var portAfterDeleteHooks []PortHook
var portAfterUpsertHooks []PortHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Port) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Port) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Port) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Port) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Port) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Port) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Port) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Port) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Port) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortHook registers your hook function for all future operations.
func AddPortHook(hookPoint boil.HookPoint, portHook PortHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portBeforeInsertHooks = append(portBeforeInsertHooks, portHook)
	case boil.BeforeUpdateHook:
		portBeforeUpdateHooks = append(portBeforeUpdateHooks, portHook)
	case boil.BeforeDeleteHook:
		portBeforeDeleteHooks = append(portBeforeDeleteHooks, portHook)
	case boil.BeforeUpsertHook:
		portBeforeUpsertHooks = append(portBeforeUpsertHooks, portHook)
	case boil.AfterInsertHook:
		portAfterInsertHooks = append(portAfterInsertHooks, portHook)
	case boil.AfterSelectHook:
		portAfterSelectHooks = append(portAfterSelectHooks, portHook)
	case boil.AfterUpdateHook:
		portAfterUpdateHooks = append(portAfterUpdateHooks, portHook)
	case boil.AfterDeleteHook:
		portAfterDeleteHooks = append(portAfterDeleteHooks, portHook)
	case boil.AfterUpsertHook:
		portAfterUpsertHooks = append(portAfterUpsertHooks, portHook)
	}
}

// One returns a single port record from the query.
func (q portQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Port, error) {
	o := &Port{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: failed to execute a one query for ports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Port records from the query.
func (q portQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortSlice, error) {
	var o []*Port

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "automodel: failed to assign all query results to Port slice")
	}

	if len(portAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Port records in the query.
func (q portQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to count ports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "automodel: failed to check if ports exists")
	}

	return count > 0, nil
}

// PortsAliases retrieves all the ports_alias's PortsAliases with an executor.
func (o *Port) PortsAliases(mods ...qm.QueryMod) portsAliasQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ports_aliases`.`port_id`=?", o.ID),
	)

	query := PortsAliases(queryMods...)
	queries.SetFrom(query.Query, "`ports_aliases`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ports_aliases`.*"})
	}

	return query
}

// UnlockidPortsUnlocks retrieves all the ports_unlock's PortsUnlocks with an executor via unlockid column.
func (o *Port) UnlockidPortsUnlocks(mods ...qm.QueryMod) portsUnlockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ports_unlocks`.`unlockid`=?", o.Portid),
	)

	query := PortsUnlocks(queryMods...)
	queries.SetFrom(query.Query, "`ports_unlocks`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ports_unlocks`.*"})
	}

	return query
}

// LoadPortsAliases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portL) LoadPortsAliases(ctx context.Context, e boil.ContextExecutor, singular bool, maybePort interface{}, mods queries.Applicator) error {
	var slice []*Port
	var object *Port

	if singular {
		object = maybePort.(*Port)
	} else {
		slice = *maybePort.(*[]*Port)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ports_aliases`),
		qm.WhereIn(`ports_aliases.port_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ports_aliases")
	}

	var resultSlice []*PortsAlias
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ports_aliases")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ports_aliases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ports_aliases")
	}

	if len(portsAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PortsAliases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &portsAliasR{}
			}
			foreign.R.Port = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PortID {
				local.R.PortsAliases = append(local.R.PortsAliases, foreign)
				if foreign.R == nil {
					foreign.R = &portsAliasR{}
				}
				foreign.R.Port = local
				break
			}
		}
	}

	return nil
}

// LoadUnlockidPortsUnlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portL) LoadUnlockidPortsUnlocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePort interface{}, mods queries.Applicator) error {
	var slice []*Port
	var object *Port

	if singular {
		object = maybePort.(*Port)
	} else {
		slice = *maybePort.(*[]*Port)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portR{}
		}
		args = append(args, object.Portid)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portR{}
			}

			for _, a := range args {
				if a == obj.Portid {
					continue Outer
				}
			}

			args = append(args, obj.Portid)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ports_unlocks`),
		qm.WhereIn(`ports_unlocks.unlockid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ports_unlocks")
	}

	var resultSlice []*PortsUnlock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ports_unlocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ports_unlocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ports_unlocks")
	}

	if len(portsUnlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UnlockidPortsUnlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &portsUnlockR{}
			}
			foreign.R.UnlockidPort = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Portid == foreign.Unlockid {
				local.R.UnlockidPortsUnlocks = append(local.R.UnlockidPortsUnlocks, foreign)
				if foreign.R == nil {
					foreign.R = &portsUnlockR{}
				}
				foreign.R.UnlockidPort = local
				break
			}
		}
	}

	return nil
}

// AddPortsAliases adds the given related objects to the existing relationships
// of the port, optionally inserting them as new records.
// Appends related to o.R.PortsAliases.
// Sets related.R.Port appropriately.
func (o *Port) AddPortsAliases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PortsAlias) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ports_aliases` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"port_id"}),
				strmangle.WhereClause("`", "`", 0, portsAliasPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortID = o.ID
		}
	}

	if o.R == nil {
		o.R = &portR{
			PortsAliases: related,
		}
	} else {
		o.R.PortsAliases = append(o.R.PortsAliases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &portsAliasR{
				Port: o,
			}
		} else {
			rel.R.Port = o
		}
	}
	return nil
}

// AddUnlockidPortsUnlocks adds the given related objects to the existing relationships
// of the port, optionally inserting them as new records.
// Appends related to o.R.UnlockidPortsUnlocks.
// Sets related.R.UnlockidPort appropriately.
func (o *Port) AddUnlockidPortsUnlocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PortsUnlock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Unlockid = o.Portid
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ports_unlocks` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"unlockid"}),
				strmangle.WhereClause("`", "`", 0, portsUnlockPrimaryKeyColumns),
			)
			values := []interface{}{o.Portid, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Unlockid = o.Portid
		}
	}

	if o.R == nil {
		o.R = &portR{
			UnlockidPortsUnlocks: related,
		}
	} else {
		o.R.UnlockidPortsUnlocks = append(o.R.UnlockidPortsUnlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &portsUnlockR{
				UnlockidPort: o,
			}
		} else {
			rel.R.UnlockidPort = o
		}
	}
	return nil
}

// Ports retrieves all the records using an executor.
func Ports(mods ...qm.QueryMod) portQuery {
	mods = append(mods, qm.From("`ports`"))
	return portQuery{NewQuery(mods...)}
}

// FindPort retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPort(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Port, error) {
	portObj := &Port{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ports` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "automodel: unable to select from ports")
	}

	if err = portObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portObj, err
	}

	return portObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Port) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portInsertCacheMut.RLock()
	cache, cached := portInsertCache[key]
	portInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portAllColumns,
			portColumnsWithDefault,
			portColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portType, portMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portType, portMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to insert into ports")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports")
	}

CacheNoHooks:
	if !cached {
		portInsertCacheMut.Lock()
		portInsertCache[key] = cache
		portInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Port.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Port) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portUpdateCacheMut.RLock()
	cache, cached := portUpdateCache[key]
	portUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portAllColumns,
			portPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("automodel: unable to update ports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portType, portMapping, append(wl, portPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update ports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by update for ports")
	}

	if !cached {
		portUpdateCacheMut.Lock()
		portUpdateCache[key] = cache
		portUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all for ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected for ports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("automodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to update all in port slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to retrieve rows affected all in update all port")
	}
	return rowsAff, nil
}

var mySQLPortUniqueColumns = []string{
	"id",
	"portid",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Port) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("automodel: no ports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portUpsertCacheMut.RLock()
	cache, cached := portUpsertCache[key]
	portUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portAllColumns,
			portColumnsWithDefault,
			portColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portAllColumns,
			portPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("automodel: unable to upsert ports, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portType, portMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portType, portMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "automodel: unable to upsert for ports")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portType, portMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to retrieve unique values for ports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to populate default values for ports")
	}

CacheNoHooks:
	if !cached {
		portUpsertCacheMut.Lock()
		portUpsertCache[key] = cache
		portUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Port record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Port) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("automodel: no Port provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portPrimaryKeyMapping)
	sql := "DELETE FROM `ports` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete from ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by delete for ports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("automodel: no portQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "automodel: unable to delete all from port slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "automodel: failed to get rows affected by deleteall for ports")
	}

	if len(portAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Port) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPort(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ports`.* FROM `ports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "automodel: unable to reload all in PortSlice")
	}

	*o = slice

	return nil
}

// PortExists checks if the Port row exists.
func PortExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ports` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "automodel: unable to check if ports exists")
	}

	return exists, nil
}
